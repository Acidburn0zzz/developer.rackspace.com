- name: Configure Cloud Monitoring
  hosts: local
  connection: local
  gather_facts: false
  vars:
    load_balancers:
    - name: production
      ip_address: "{{ clb_prod['balancer']['virtual_ips'][0]['address'] }}"
    - name: staging
      ip_address: "{{ clb_staging['balancer']['virtual_ips'][0]['address'] }}"
    monitoring_zones:
    - mzdfw
    - mziad
    - mzord
  vars_files:
  - [ 'secrets.yml', 'secrets.prod.yml' ]
  tasks:

  - name: Nuke all existing monitoring on this account
    command: ../script/rmmon

  - name: Create a monitoring entity for each load balancer
    rax_mon_entity:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      name: entity_{{ item.name }}
      named_ip_addresses:
        load_balancer: "{{ item.ip_address }}"
    with_items: load_balancers
    register: entities

  - name: Verify that port 80 is redirecting to 443
    rax_mon_check:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      entity_id: "{{ item.entity.id }}"
      label: http_check_redirect
      check_type: remote.http
      details:
        url: http://{{ item.item.ip_address }}/
        method: GET
        follow_redirects: false
      monitoring_zones_poll: "{{ monitoring_zones }}"
      target_alias: load_balancer
    with_items: entities.results
    register: http_checks_redirect

  - name: Create checks on index.html
    rax_mon_check:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      entity_id: "{{ item.entity.id }}"
      label: http_check_index
      check_type: remote.http
      details:
        url: https://{{ item.item.ip_address }}/
        body: <span class="boxtitle">SDKs &amp; Tools</span>
        include_body: "true"
        method: GET
        follow_redirects: "true"
      monitoring_zones_poll: "{{ monitoring_zones }}"
      target_alias: load_balancer
    with_items: entities.results
    register: http_checks_index

  - name: Create a check on the blog index page
    rax_mon_check:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      entity_id: "{{ item.entity.id }}"
      label: http_check_blog
      check_type: remote.http
      details:
        url: https://{{ item.item.ip_address }}/blog/
        body: <span class="headline">Developer Blog</span>
        include_body: "true"
        method: GET
        follow_redirects: "true"
      monitoring_zones_poll: "{{ monitoring_zones }}"
      target_alias: load_balancer
    with_items: entities.results
    register: http_checks_blog

  - name: Create a check on the SDK index page
    rax_mon_check:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      entity_id: "{{ item.entity.id }}"
      label: http_check_sdk
      check_type: remote.http
      details:
        url: https://{{ item.item.ip_address }}/sdks/
        body: <span class="headline">SDKs &amp; Tools</span>
        include_body: false
        method: GET
        follow_redirects: true
      monitoring_zones_poll: "{{ monitoring_zones }}"
      target_alias: load_balancer
    with_items: entities.results
    register: http_checks_sdk

  - name: PagerDuty notification.
    rax_mon_notification:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      label: pagerduty_notification
      notification_type: pagerduty
      details:
        service_key: "{{ pagerduty_servicekey }}"
    register: active_notification
    when: notification_email_address is not defined

  - name: Email notification.
    rax_mon_notification:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      label: email_notification
      notification_type: email
      details:
        address: "{{ notification_email_address }}"
    register: active_notification
    when: notification_email_address is defined

  - name: Create a notification plan.
    rax_mon_notification_plan:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      label: escalation_station
      ok_state:
      - "{{ active_notification.notification.id }}"
      warning_state:
      - "{{ active_notification.notification.id }}"
      critical_state:
      - "{{ active_notification.notification.id }}"
    register: escalation_station

  - name: Trigger alarms when the redirection doesn't happen.
    rax_mon_alarm:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      label: redirection
      entity_id: "{{ item.entity_id }}"
      check_id: "{{ item.check_id }}"
      notification_plan_id: "{{ escalation_station.notification_plan.id }}"
      criteria: >
        :set consecutiveCount=2

        if (metric['code'] != "301") {
          return new AlarmStatus(CRITICAL, "Non-301 status code #{code} returned.");
        }
        if (metric['duration'] > 500) {
          return new AlarmStatus(WARNING, "Redirectin took #{duration}ms > 500ms.");
        }
        return new AlarmStatus(OK);
    with_items:
    - entity_id: "{{ entities.results[0].entity.id }}"
      check_id: "{{ http_checks_redirect.results[0].check.id }}"
    - entity_id: "{{ entities.results[1].entity.id }}"
      check_id: "{{ http_checks_redirect.results[1].check.id }}"

  - name: Trigger an alarm when a page has incorrect content.
    rax_mon_alarm:
      credentials: ~/.rackspace_cloud_credentials
      state: present
      label: "{{ item.label }}"
      entity_id: "{{ item.entity_id }}"
      check_id: "{{ item.check_id }}"
      notification_plan_id: "{{ escalation_station.notification_plan.id }}"
      criteria: >
        :set consecutiveCount=2

        if (metric['code'] != "200") {
          return new AlarmStatus(CRITICAL, "Non-200 status code #{code} returned.");
        }
        if (metric['body_match'] == "") {
          return new AlarmStatus(CRITICAL, "Expected page content not found.");
        }
        if (metric['cert_end_in'] < 5184000) {
          return new AlarmStatus(WARNING, "SSL certificate will expire in less than 60 days.");
        }
        if (metric['duration'] > 500) {
          return new AlarmStatus(WARNING, "Page took #{duration}ms to serve > 500ms.");
        }
        return new AlarmStatus(OK);
    with_items:
    - label: index_is_down
      entity_id: "{{ entities.results[0].entity.id }}"
      check_id: "{{ http_checks_index.results[0].check.id }}"
    - label: blog_is_down
      entity_id: "{{ entities.results[0].entity.id }}"
      check_id: "{{ http_checks_blog.results[0].check.id }}"
    - label: sdk_is_down
      entity_id: "{{ entities.results[0].entity.id }}"
      check_id: "{{ http_checks_sdk.results[0].check.id }}"
    - label: index_is_down
      entity_id: "{{ entities.results[1].entity.id }}"
      check_id: "{{ http_checks_index.results[1].check.id }}"
    - label: blog_is_down
      entity_id: "{{ entities.results[1].entity.id }}"
      check_id: "{{ http_checks_blog.results[1].check.id }}"
    - label: sdk_is_down
      entity_id: "{{ entities.results[1].entity.id }}"
      check_id: "{{ http_checks_sdk.results[1].check.id }}"
